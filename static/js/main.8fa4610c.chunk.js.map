{"version":3,"sources":["sourceConstants/index.js","App.jsx","serviceWorker.js","index.jsx"],"names":["XML_SOURCE","Heading","styled","h1","Header","Layout","Content","App","React","useState","name","value","currency","setCurrency","source","currentSource","setCurrentSource","fetchData","a","axios","get","response","data","xml","XMLParser","parseFromString","euro","children","find","el","attributes","ID","console","log","EUR","Valute","Name","Value","key","course","useEffect","timer","setInterval","clearInterval","thema","className","style","height","padding","margin","minHeight","title","Group","onChange","event","target","Button","width","pagination","columns","dataIndex","dataSource","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6XAAaA,EAAa,8C,yFCW1B,IAAMC,EAAUC,IAAOC,GAAV,KAILC,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAkFDC,MAhFf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,CAAEC,KAAM,4DAAgBC,MAAO,8DADjE,mBACNC,EADM,KACIC,EADJ,OAE6BL,IAAMC,SAASK,GAF5C,mBAENC,EAFM,KAESC,EAFT,KAIPC,EAAS,uCAAG,kCAAAC,EAAA,sEACOC,IAAMC,IAAIL,GADjB,OAEa,kBADvBM,EADU,QAEIC,MACZC,GAAM,IAAIC,KAAYC,gBAAgBJ,EAASC,MAC/CI,EAAOH,EAAII,SAASC,MAAK,SAACC,GAAD,MAA6B,WAArBA,EAAGC,WAAWC,MACrDC,QAAQC,IAAI,gBACZpB,EAAY,CAAEH,KAAMgB,EAAKC,SAAS,GAAGhB,MAAOA,MAAOe,EAAKC,SAAS,GAAGhB,UAE1CuB,EAAYb,EAA9BC,KAAQa,OAAUD,IAC1BF,QAAQC,IAAI,iBACZpB,EAAY,CAAEH,KAAMwB,EAAIE,KAAMzB,MAAOuB,EAAIG,SAV3B,2CAAH,qDA2BTf,EAAO,CACX,CACEgB,IAAK,IACL5B,KAAME,EAASF,KACf6B,OAAQ3B,EAASD,QAiBrB,OARAH,IAAMgC,WAAU,WACdvB,IACA,IAAMwB,EAAQC,aAAY,kBAAMzB,MAAa,KAC7C,OAAO,WACL0B,cAAcF,MAEf,CAAC1B,IAGF,kBAAC,IAAD,KACE,kBAACX,EAAD,CAAQwC,MAAM,OAAOC,UAAU,UAC7B,kBAAC5C,EAAD,yBAEF,kBAAC,IAAD,CAAQ6C,MAAO,CAAEC,OAAQ,QAASC,QAAS,gBACzC,kBAAC1C,EAAD,CACEuC,UAAU,yBACVC,MAAO,CACLE,QAAS,GACTC,OAAQ,EACRC,UAAW,MAGb,kBAAC,IAAD,CAAMC,MAAM,eACV,kBAAC,IAAMC,MAAP,CAAazC,MAAOI,EAAesC,SA5BlB,SAACC,GAC1BtC,EAAiBsC,EAAMC,OAAO5C,OAC9BqB,QAAQC,IAAIlB,KA2BF,kBAAC,IAAMyC,OAAP,CAAc7C,MAAOG,GAArB,sDACA,kBAAC,IAAM0C,OAAP,CAAc7C,MDrFD,8CCqFb,uDAEF,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAOmC,MAAO,CAAEW,MAAO,QAAUC,YAAY,EAAOC,QAtD9C,CACd,CACER,MAAO,mDACPS,UAAW,OACXtB,IAAK,QAEP,CACEa,MAAO,2BACPS,UAAW,SACXtB,IAAK,WA6CuEuB,WAAYvC,SC7E1EwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.8fa4610c.chunk.js","sourcesContent":["export const XML_SOURCE = 'https://www.cbr-xml-daily.ru/daily_utf8.xml';\r\nexport const JSON_SOURCE = 'https://www.cbr-xml-daily.ru/daily_json.js';\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {\r\n  Layout, Card, Radio, Table, Divider,\r\n} from 'antd';\r\nimport XMLParser from 'react-xml-parser';\r\nimport 'antd/dist/antd.css';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport * as source from './sourceConstants/index';\r\n\r\nconst Heading = styled.h1`\r\n  color: #fff;\r\n  `;\r\n\r\nconst { Header, Content } = Layout;\r\n\r\nfunction App() {\r\n  const [currency, setCurrency] = React.useState({ name: 'Получение...', value: 'Получение...' });\r\n  const [currentSource, setCurrentSource] = React.useState(source.XML_SOURCE);\r\n\r\n  const fetchData = async () => {\r\n    const response = await axios.get(currentSource);\r\n    if (typeof response.data === 'string') {\r\n      const xml = new XMLParser().parseFromString(response.data);\r\n      const euro = xml.children.find((el) => el.attributes.ID === 'R01239');\r\n      console.log('fetching xml');\r\n      setCurrency({ name: euro.children[3].value, value: euro.children[4].value });\r\n    } else {\r\n      const { data: { Valute: { EUR } } } = response;\r\n      console.log('fetching json');\r\n      setCurrency({ name: EUR.Name, value: EUR.Value });\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Название',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Курс',\r\n      dataIndex: 'course',\r\n      key: 'course',\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: '1',\r\n      name: currency.name,\r\n      course: currency.value,\r\n    },\r\n  ];\r\n\r\n  const handleSourseChange = (event) => {\r\n    setCurrentSource(event.target.value);\r\n    console.log(currentSource);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    fetchData();\r\n    const timer = setInterval(() => fetchData(), 10000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [currentSource]);\r\n\r\n  return (\r\n    <Layout>\r\n      <Header thema=\"dark\" className=\"header\">\r\n        <Heading>Online Currency</Heading>\r\n      </Header>\r\n      <Layout style={{ height: '100vh', padding: '0 24px 24px' }}>\r\n        <Content\r\n          className=\"site-layout-background\"\r\n          style={{\r\n            padding: 24,\r\n            margin: 0,\r\n            minHeight: 280,\r\n          }}\r\n        >\r\n          <Card title=\"Euro course\">\r\n            <Radio.Group value={currentSource} onChange={handleSourseChange}>\r\n              <Radio.Button value={source.XML_SOURCE}>Источник 1</Radio.Button>\r\n              <Radio.Button value={source.JSON_SOURCE}>Источник 2</Radio.Button>\r\n            </Radio.Group>\r\n            <Divider />\r\n            <Table style={{ width: '100%' }} pagination={false} columns={columns} dataSource={data} />\r\n          </Card>\r\n        </Content>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}